import Import from '../models/importModel.js';
import Product from '../models/productModel.js'; // S·ª≠ d·ª•ng ƒë√∫ng m√¥ h√¨nh Product
import Notification from '../models/notificationModel.js';
// GET /api/imports
export const getAllImports = async (req, res) => {
  try {
    const imports = await Import.find().populate({
  path: 'products.productId',
  model: 'Product',
  select: 'name price sizes image',
});

    const formatted = imports.map((item) => {
      const productDetails = item.products.map((p) => {
        const product = p.productId || {};
        const name = product.name || 'Kh√¥ng x√°c ƒë·ªãnh';
        const price = product.price || 0;
        const cost = p.cost || 0;
        const sizes = p.sizes || [];

        const quantity = sizes.reduce((sum, s) => sum + (s.quantity || 0), 0);
        const totalCost = sizes.reduce((sum, s) => sum + ((s.quantity || 0) * cost), 0);

        return {
          name,
          price,
          cost,
          quantity,
          sizes, // gi·ªØ nguy√™n ƒë·ªÉ client hi·ªÉn th·ªã chi ti·∫øt theo size
           image: product.image || [],
        };
      });

      const totalQuantity = productDetails.reduce((acc, p) => acc + p.quantity, 0);
      const totalCost = productDetails.reduce((acc, p) => acc + (p.cost * p.quantity), 0);

      return {
        _id: item._id,
        importDate: item.importDate,
        note: item.note || '',
        productDetails,
        productNames: productDetails.map(p => p.name).join(', '),
        totalQuantity,
        totalCost,
      };
    });

    res.json({ data: formatted });
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch nh·∫≠p h√†ng:', error);
    res.status(500).json({
      message: 'L·ªói server khi l·∫•y danh s√°ch nh·∫≠p h√†ng',
      error: error.message,
    });
  }
};


export const createImport = async (req, res) => {
  try {

    const { products, importDate, note, totalCost } = req.body;

    if (!products || !Array.isArray(products) || products.length === 0) {
      return res.status(400).json({ message: 'Products are required!' });
    } 

    // Chuy·ªÉn ƒë·ªïi s·∫£n ph·∫©m th√†nh d·∫°ng d·ªÖ l∆∞u v√†o MongoDB
    const formattedProducts = products.map((product) => {
      const formattedSizes = product.sizes.map((s) => ({
        size: s.size,
        quantity: s.quantity,
      }));


      return {
        productId: product.productId,
        cost: product.cost, // L·∫•y cost t·ª´ phi·∫øu nh·∫≠p
        sizes: formattedSizes,
      };
    });


    // T·∫°o m·ªôt phi·∫øu nh·∫≠p m·ªõi
    const importRecord = new Import({
      products: formattedProducts,
      totalCost,
      importDate: new Date(),
      note: note || '',
    });

    // L∆∞u phi·∫øu nh·∫≠p v√†o MongoDB
    await importRecord.save();
        await Notification.create({
      type: 'success',
      title: 'üì¶ Nh·∫≠p h√†ng m·ªõi',
      content: `ƒê√£ nh·∫≠p ${formattedProducts.length} s·∫£n ph·∫©m v·ªõi t·ªïng chi ph√≠ ${totalCost.toLocaleString()} VND`,
      link: '/admin/imports',
      isRead: false,
      createdAt: new Date()
    });
    // C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng v√† cost cho c√°c s·∫£n ph·∫©m
    for (const product of formattedProducts) {
      for (const size of product.sizes) {
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v√† cost cho s·∫£n ph·∫©m
        const updatedProduct = await Product.findByIdAndUpdate(
          product.productId,
          {
            $inc: { // TƒÉng s·ªë l∆∞·ª£ng c·ªßa size t∆∞∆°ng ·ª©ng
              'sizes.$[elem].quantity': size.quantity,
            },
            $set: {
              'cost': product.cost, // C·∫≠p nh·∫≠t cost t·ª´ phi·∫øu nh·∫≠p v√†o s·∫£n ph·∫©m
            }
          },
          {
            arrayFilters: [{ 'elem.size': size.size }], // L·ªçc size trong m·∫£ng sizes
            new: true // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
          }
        );
      }
    }

    return res
      .status(201)
      .json({ success: true, message: 'Import record created and products updated successfully!' });
  } catch (error) {
    console.error('Error creating import:', error);
    return res.status(500).json({ message: 'Server error' });
  }
};



 





